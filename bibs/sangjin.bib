@inproceedings{ddc-hotnets,
  title = {Network support for resource disaggregation in next-generation datacenters},
  author = {Han, Sangjin and Egi, Norbert and Panda, Aurojit and Ratnasamy, Sylvia and Shi, Guangyu and Shenker, Scott},
  booktitle = {Proceedings of the Twelfth ACM Workshop on Hot Topics in Networks},
  year = {2013},
  url = {http://www.eecs.berkeley.edu/~sangjin/static/pub/hotnets2013_ddc.pdf},
  abstract = {
    Datacenters have traditionally been architected as a collection
    of servers wherein each server aggregates a fixed
    amount of computing, memory, storage, and communication
    resources. In this paper, we advocate an alternative
    construction in which the resources within a server
    are disaggregated and the datacenter is instead architected
    as a collection of standalone resources.
    Disaggregation brings greater modularity to datacenter
    infrastructure, allowing operators to optimize their
    deployments for improved efficiency and performance.
    However, the key enabling or blocking factor for disaggregation
    will be the network since communication that
    was previously contained within a single server now traverses
    the datacenter fabric. This paper thus explores the
    question of whether we can build networks that enable
    disaggregation at datacenter scales.
  }
}

@inproceedings{celias-hotos,
  title = {Large-scale computation not at the cost of expressiveness},
  author = {Han, Sangjin and Ratnasamy, Sylvia},
  booktitle = {Proceedings of the 14th USENIX conference on Hot Topics in Operating Systems},
  year = {2013},
  url = {http://www.eecs.berkeley.edu/~sangjin/static/pub/hotos2013_celias.pdf},
  abstract = {
    We present Celias, a new concurrent programming model for data-intensive 
    scalable computing. Celias supports many virtues commonly found in existing 
    distributed programming frameworks, such as elastic scaling and fault 
    tolerance, without sacrificing expressiveness. The key design idea of Celias 
    is the concept of a microtask, as a scalable, fault-tolerant, and completely 
    data-driven unit of computation. By combining Tuplespace and microtasks, 
    Celias provides an intuitive yet powerful programming abstraction for 
    large and complex problems.
  }
}

@inproceedings{megapipe-osdi,
  title = {MegaPipe: A New Programming Interface for Scalable Network I/O},
  author = {Sangjin Han and Scott Marshall and Byung-Gon Chun and Sylvia Ratnasamy},
  booktitle = {Proceedings of the Usenix Symposium on Operating Systems Design and Implementation (OSDI)},
  year = {2012},
  url = {http://www.eecs.berkeley.edu/~sangjin/static/pub/osdi2012_megapipe.pdf},
  abstract = {
    We present MegaPipe, a new API for efficient, scalable network I/O for 
    message-oriented workloads. The design of MegaPipe centers around the 
    abstraction of a channelâ€”a per-core, bidirectional pipe between the kernel 
    and user space, used to exchange both I/O requests and event notifications. 
    On top of the channel abstraction, we introduce three key concepts of 
    MegaPipe: partitioning, lightweight socket (lwsocket), and batching.

    We implement MegaPipe in Linux and adapt memcached and nginx. 
    Our results show that, by embracing a clean-slate design approach, 
    MegaPipe is able to exploit new opportunities for improved performance 
    and ease of programmability. In microbenchmarks on an 8-core server with 
    64 B messages, MegaPipe outperforms baseline Linux between 29\% (for long 
    connections) and 582\% (for short connections). MegaPipe improves the 
    performance of a modified version of memcached between 15\% and 320\%. 
    For a workload based on real-world HTTP traces, MegaPipe boosts the 
    throughput of nginx by 75\%.
  }
}
